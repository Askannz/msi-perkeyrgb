#!/usr/bin/env python

import argparse
import re
from config import load_config, ConfigError
from msi_keyboard import MSI_Keyboard

VERSION = "1.0"
DEFAULT_VENDOR_ID = 0x1038
DEFAULT_PRODUCT_ID = 0x1122

parser = argparse.ArgumentParser(description='Tool to control per-key RGB keyboard backlighting on MSI laptops. https://github.com/Askannz/msi-perkeyrgb')
parser.add_argument('-v', '--version', action='store_true', help='Prints version and exits.')
parser.add_argument('-c', '--config', action='store', metavar='FILENAME', help='Loads the configuration file with the given FILENAME. Refer to the README for syntax.')
parser.add_argument('--id', action='store', metavar='VENDOR_ID:PRODUCT_ID', help='This argument allows you to specify the vendor/product id of your keyboard. You should not have to use this unless opening the keyboard fails with the default value. IDs are in hexadecimal format (example :  1038:1122)')

args = parser.parse_args()

if args.version:
    print("Version : %s" % VERSION)
else:
    if not args.config:
        print("Please specify a config file to load. Refer to the README for syntax.")
    else:
        if args.id:
            id_str = args["id"]
            if not re.fullmatch("^[0-9a-f]{4}:[0-9a-f]{4}$", id_str):
                print("Invalid syntax for vendor/product ID.")
            else:
                vid, pid = [int(s, 16) for s in id_str.split(':')]
        else:
            vid, pid = DEFAULT_VENDOR_ID, DEFAULT_PRODUCT_ID

        try:
            colors_map = load_config(args.config)
        except ConfigError as e:
            print("Error reading config file : %s" % str(e))
        else:
            kb = MSI_Keyboard(vid, pid)
            kb.set_colors(colors_map)
            kb.refresh()
